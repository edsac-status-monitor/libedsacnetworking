# Copyright 2017. This is MIT Licenced.
# Makefile based on tutorial at http://wiki.osdev.org/Makefile

# File Lists
## Non-Source Files
AUXFILES := Makefile README.md LICENSE
## directory containing .c files
SRCDIRS := src contrib
## directories containing .c files which do not contain unit tests
TESTABLESRC := src
## directory containing .h files
INCDIRS := include

## find all .c files
SRCFILES := $(shell find $(SRCDIRS) -type f -name "*.c") 
TESTSRCFILES := $(shell find $(TESTABLESRC) -type f -name "*.c")
## find all .h files
HDRFILES := $(shell find $(INCDIRS) -type f -name "*.h")

## abc.c => abc.o
OBJFILES := $(patsubst %.c,%.o,$(SRCFILES))
## specific hack for how we are doing unit tests
## apc.c => abc_t
TSTFILES := $(patsubst %.c,%_t,$(TESTSRCFILES))
## file dependencies generated by gcc
DEPFILES := $(patsubst %.c,%.d,$(SRCFILES))
TSTDEPFILES := $(patsubst %,%.d,$(TSTFILES))

# Compiler flags
## *ALL* the warnings
WARNINGS := -Wall -Wextra -pedantic -Wshadow -Wpointer-arith -Wcast-align \
            -Wwrite-strings -Wmissing-prototypes -Wmissing-declarations \
            -Wredundant-decls -Wnested-externs -Winline -Wno-long-long \
            -Wuninitialized -Wconversion -Wstrict-prototypes
## weak optimising for now but do use stack smashing protection
CFLAGS := -O -g -std=c99 -fstack-protector-strong $(WARNINGS) -I $(INCDIRS)

# Executable aliases
AR := ar
CC := gcc
RM := rm

# output name
OUTNAME := libnetworking

# targets which are not files
.PHONY: all clean check testfiles

# top level targets
all: $(OUTNAME).a

## library just packages all of the object files
$(OUTNAME).a: $(OBJFILES)
	@$(AR) r $@ $?

clean:
	-@2>/dev/null $(RM) $(wildcard $(OBJFILES) $(DEPFILES) $(TSTFILES) $(TSTDEPFILES) $(OUTNAME).a $(OUTNAME).tgz); true

## run unit tests
check: testfiles
	-@rc=0; count=0; \
    for file in $(TSTFILES); do \
        echo " TST     $$file"; ./$$file; \
    rc=`expr $$rc + $$?`; count=`expr $$count + 1`; \
    done; \
	echo; echo "Tests executed: $$count  Tests failed: $$rc"

testfiles: $(TSTFILES)

## include dependency files generated by gcc
-include $(DEPFILES) $(TSTDEPFILES)

## rule to make every .o file
### -MMD generates the dependency file
### -MP adds some useful dummy rules
%.o: %.c Makefile
	@$(CC) $(CFLAGS) -MMD -MP -c $< -o $@

## rule to make unit tests
### this is a bit of a hack but it is a nice hack
%_t: %.c Makefile $(OUTNAME).a
	@$(CC) $(CFLAGS) -MMD -MP -DTEST $< $(OUTNAME).a -o $@
